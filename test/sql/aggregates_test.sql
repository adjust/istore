BEGIN;
-- isagg int should skip null keys;
-- ./spec/istore/aggregates_spec.rb:9;
CREATE EXTENSION istore;
SELECT id, isagg(NULLIF(i%10,3), NULLIF(i::int, 50) ) FROM generate_series(1,100) i, generate_series(1,3) id GROUP BY id ORDER BY id;;
ROLLBACK;
BEGIN;
-- isagg int should skip null values;
-- ./spec/istore/aggregates_spec.rb:16;
CREATE EXTENSION istore;
SELECT id, isagg((i%10), NULL::int) FROM generate_series(1,100) i, generate_series(1,3) id GROUP BY id ORDER BY id;;
ROLLBACK;
BEGIN;
-- isagg bigint should skip null keys;
-- ./spec/istore/aggregates_spec.rb:9;
CREATE EXTENSION istore;
SELECT id, isagg(NULLIF(i%10,3), NULLIF(i::bigint, 50) ) FROM generate_series(1,100) i, generate_series(1,3) id GROUP BY id ORDER BY id;;
ROLLBACK;
BEGIN;
-- isagg bigint should skip null values;
-- ./spec/istore/aggregates_spec.rb:16;
CREATE EXTENSION istore;
SELECT id, isagg((i%10), NULL::bigint) FROM generate_series(1,100) i, generate_series(1,3) id GROUP BY id ORDER BY id;;
ROLLBACK;
BEGIN;
-- extend istore should correctly extend internal aggregation state while summing istores which total length is larger than default capacity;
-- ./spec/istore/aggregates_spec.rb:32;
CREATE EXTENSION istore;
CREATE TABLE test (v istore);
INSERT INTO test SELECT istore(array_agg(x), array_agg(x)) FROM generate_series(1, 31, 2) AS a(x);
INSERT INTO test SELECT istore(array_agg(x), array_agg(x)) FROM generate_series(2, 32, 2) AS a(x);
SELECT SUM(v) FROM test;
ROLLBACK;
BEGIN;
-- extend bigistore should correctly extend internal aggregation state while summing istores which total length is larger than default capacity;
-- ./spec/istore/aggregates_spec.rb:32;
CREATE EXTENSION istore;
CREATE TABLE test (v bigistore);
INSERT INTO test SELECT bigistore(array_agg(x), array_agg(x)) FROM generate_series(1, 31, 2) AS a(x);
INSERT INTO test SELECT bigistore(array_agg(x), array_agg(x)) FROM generate_series(2, 32, 2) AS a(x);
SELECT SUM(v) FROM test;
ROLLBACK;
