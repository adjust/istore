BEGIN;
-- functions_plain should find keys with exists;
-- ./spec/functions_plain_spec.rb:8;
CREATE EXTENSION istore;
SELECT exist('1=>1'::istore, 1);
SELECT exist('1=>1'::istore, 2);
SELECT exist('1=>1, -1=>0'::istore, 2);
SELECT exist('1=>1, -1=>0'::istore, -1);
ROLLBACK;
BEGIN;
-- functions_plain should fetchvals;
-- ./spec/functions_plain_spec.rb:15;
CREATE EXTENSION istore;
SELECT fetchval('1=>1'::istore, 1);
SELECT fetchval('2=>1'::istore, 1);
SELECT fetchval('1=>1, 1=>1'::istore, 1);
SELECT fetchval('1=>1, 1=>1'::istore, 2);
ROLLBACK;
BEGIN;
-- functions_plain should return set of ints;
-- ./spec/functions_plain_spec.rb:22;
CREATE EXTENSION istore;
SELECT * FROM each('1=>1'::istore);
SELECT * FROM each('5=>11, 4=>8'::istore);
SELECT * FROM each('5=>-411, 4=>8'::istore);
SELECT value + 100 FROM each('5=>-411, 4=>8'::istore);
SELECT * FROM each('1=>1, 5=>NULL'::istore);
SELECT * FROM each(NULL::istore);
ROLLBACK;
BEGIN;
-- functions_plain should add istores;
-- ./spec/functions_plain_spec.rb:44;
CREATE EXTENSION istore;
SELECT add('1=>1, 2=>1'::istore, '1=>1, 2=>1'::istore);
SELECT add('1=>1, 2=>1'::istore, '-1=>1, 2=>1'::istore);
SELECT add('1=>1, 2=>1'::istore, '-1=>-1, 2=>1'::istore);
SELECT add('-1=>1, 2=>1'::istore, '-1=>-1, 2=>1'::istore);
SELECT add('-1=>-1, 2=>1'::istore, '-1=>-1, 2=>1'::istore);
SELECT add('-1=>-1, 2=>1'::istore, 1);
SELECT add('-1=>-1, 2=>1'::istore, -1);
SELECT add('-1=>-1, 2=>1'::istore, 0);
SELECT add(istore(Array[]::integer[], Array[]::integer[]), '1=>NULL'::istore);;
ROLLBACK;
BEGIN;
-- functions_plain should substract istores;
-- ./spec/functions_plain_spec.rb:65;
CREATE EXTENSION istore;
SELECT subtract('1=>1, 2=>1'::istore, '1=>1, 2=>1'::istore);
SELECT subtract('1=>1, 2=>1'::istore, '-1=>1, 2=>1'::istore);
SELECT subtract('1=>1, 2=>1'::istore, '-1=>-1, 2=>1'::istore);
SELECT subtract('-1=>1, 2=>1'::istore, '-1=>-1, 2=>1'::istore);
SELECT subtract('-1=>-1, 2=>1'::istore, '-1=>-1, 2=>1'::istore);
SELECT subtract('-1=>-1, 2=>1'::istore, 1);
SELECT subtract('-1=>-1, 2=>1'::istore, -1);
SELECT subtract('-1=>-1, 2=>1'::istore, 0);
SELECT subtract(istore(Array[]::integer[], Array[]::integer[]), '1=>NULL'::istore);;
ROLLBACK;
BEGIN;
-- functions_plain should multiply istores;
-- ./spec/functions_plain_spec.rb:86;
CREATE EXTENSION istore;
SELECT multiply('1=>1, 2=>1'::istore, '1=>1, 2=>1'::istore);
SELECT multiply('1=>1, 2=>1'::istore, '-1=>1, 2=>1'::istore);
SELECT multiply('1=>1, 2=>1'::istore, '-1=>-1, 2=>1'::istore);
SELECT multiply('-1=>1, 2=>1'::istore, '-1=>-1, 2=>1'::istore);
SELECT multiply('-1=>-1, 2=>1'::istore, '-1=>-1, 2=>1'::istore);
SELECT multiply('-1=>-1, 2=>1'::istore, 1);
SELECT multiply('-1=>-1, 2=>1'::istore, -1);
SELECT multiply('-1=>-1, 2=>1'::istore, 0);
ROLLBACK;
BEGIN;
-- functions_plain should divide istores;
-- ./spec/functions_plain_spec.rb:105;
CREATE EXTENSION istore;
SELECT divide('1=>1, 2=>1'::istore, '1=>1, 2=>1'::istore);
SELECT divide('1=>1, 2=>1'::istore, '-1=>1, 2=>1'::istore);
SELECT divide('1=>1, 2=>1'::istore, '-1=>-1, 2=>1'::istore);
SELECT divide('-1=>1, 2=>1'::istore, '-1=>-1, 2=>1'::istore);
SELECT divide('-1=>-1, 2=>1'::istore, '-1=>-1, 2=>1'::istore);
SELECT divide('-1=>-1, 2=>1'::istore, 1);
SELECT divide('-1=>-1, 2=>1'::istore, -1);
SELECT divide('-1=>-1, 2=>1'::istore, 0);
SELECT divide('-1=>-1, 2=>1'::istore, 1::bigint);
SELECT divide('-1=>-1, 2=>1'::istore, -1::bigint);
SELECT divide('-1=>-1, 2=>1'::istore, 0::bigint);
SELECT divide('-1=>-8000000000, 2=>8000000000'::istore, 4000000000);
ROLLBACK;
BEGIN;
-- functions_plain should generate istore from array;
-- ./spec/functions_plain_spec.rb:132;
CREATE EXTENSION istore;
SELECT istore_from_array(ARRAY[1]);
SELECT istore_from_array(ARRAY[1,1,1,1]);
SELECT istore_from_array(NULL);
SELECT istore_from_array(ARRAY[1,2,3,4]);
SELECT istore_from_array(ARRAY[1,2,3,4,1,2,3,4]);
SELECT istore_from_array(ARRAY[1,2,3,4,1,2,3,NULL]);
SELECT istore_from_array(ARRAY[NULL,2,3,4,1,2,3,4]);
SELECT istore_from_array(ARRAY[NULL,2,3,4,1,2,3,NULL]);
SELECT istore_from_array(ARRAY[1,2,3,NULL,1,NULL,3,4,1,2,3]);
SELECT istore_from_array(ARRAY[NULL,NULL,NULL,NULL]::integer[]);
SELECT istore_from_array(ARRAY[]::integer[]);
ROLLBACK;
BEGIN;
-- functions_plain should agg an array of istores;
-- ./spec/functions_plain_spec.rb:154;
CREATE EXTENSION istore;
SELECT istore_agg(ARRAY['1=>1']::istore[]);
SELECT istore_agg(ARRAY['1=>1','1=>1']::istore[]);
SELECT istore_agg(ARRAY['1=>1,2=>1','1=>1,2=>-1']::istore[]);
SELECT istore_agg(ARRAY['1=>1,2=>1','1=>1,2=>-1',NULL]::istore[]);
SELECT istore_agg(ARRAY[NULL,'1=>1,2=>1','1=>1,2=>-1']::istore[]);
SELECT istore_agg(ARRAY[NULL,'1=>1,2=>1','1=>1,2=>-1',NULL]::istore[]);
ROLLBACK;
BEGIN;
-- functions_plain should sum up istores;
-- ./spec/functions_plain_spec.rb:169;
CREATE EXTENSION istore;
SELECT istore_sum_up('1=>1'::istore);
SELECT istore_sum_up(NULL::istore);
SELECT istore_sum_up('1=>1, 2=>1'::istore);
SELECT istore_sum_up('1=>1 ,2=>-1, 1=>1'::istore);
ROLLBACK;
BEGIN;
-- functions_plain should sum istores from table;
-- ./spec/functions_plain_spec.rb:176;
CREATE EXTENSION istore;
CREATE TABLE test (a istore);
INSERT INTO test VALUES('1=>1'),('2=>1'), ('3=>1');
SELECT SUM(a) FROM test;
ROLLBACK;
BEGIN;
-- functions_plain should sum istores from table;
-- ./spec/functions_plain_spec.rb:183;
CREATE EXTENSION istore;
CREATE TABLE test (a istore);
INSERT INTO test VALUES('1=>1'),('2=>1'),('3=>1'),(NULL),('3=>3');
SELECT SUM(a) FROM test;
ROLLBACK;
BEGIN;
-- functions_plain should sum istores from table;
-- ./spec/functions_plain_spec.rb:190;
CREATE EXTENSION istore;
CREATE TABLE test (a istore);
INSERT INTO test VALUES('1=>1'),('2=>1'),('3=>1'),(NULL),('3=>NULL');
SELECT SUM(a) FROM test;
ROLLBACK;
BEGIN;
-- functions_plain should return istores from arrays;
-- ./spec/functions_plain_spec.rb:197;
CREATE EXTENSION istore;
SELECT istore_array_add(Array[5,3,4,5], Array[1,2,3,4]);
SELECT istore(Array[5,3,4,5], Array[1,2,3,4]);
SELECT istore(Array[5,3,4,5], Array[1,2,3,4]::bigint[]);
SELECT istore(Array[5,3,4,5], Array[4000000000,2,4000000000,4]::bigint[]);
ROLLBACK;
BEGIN;
-- functions_plain should return istores from bigint arrays;
-- ./spec/functions_plain_spec.rb:211;
CREATE EXTENSION istore;
SELECT istore_array_add(Array[5,3,4,5], Array[1,2,3,4000000000]::bigint[]);
ROLLBACK;
BEGIN;
-- functions_plain should fill gaps;
-- ./spec/functions_plain_spec.rb:216;
CREATE EXTENSION istore;
SELECT fill_gaps('2=>17, 4=>3'::istore, 5, 0);
SELECT fill_gaps('2=>17, 4=>3'::istore, 5);
SELECT fill_gaps('2=>17, 4=>3'::istore, 3, 11);
SELECT fill_gaps('2=>17, 4=>3'::istore, 0, 0);
SELECT fill_gaps('2=>17'::istore, 3, NULL);
SELECT fill_gaps('2=>NULL, 3=>3'::istore, 3, 0);
SELECT fill_gaps(''::istore, 3, 0);
SELECT fill_gaps(''::istore, 3, 4e9::bigint);
SELECT fill_gaps(NULL::istore, 3, 0);
SELECT fill_gaps('2=>17, 4=>3'::istore, -5, 0);
ROLLBACK;
BEGIN;
-- functions_plain should fill accumulate;
-- ./spec/functions_plain_spec.rb:246;
CREATE EXTENSION istore;
SELECT accumulate('2=>17, 4=>3'::istore);
SELECT accumulate('2=>NULL, 4=>3'::istore);
SELECT accumulate('1=>3, 2=>NULL, 4=>3, 6=>2'::istore);
SELECT accumulate(''::istore);
SELECT accumulate('10=>5'::istore);
SELECT accumulate(NULL::istore);
SELECT accumulate('-20=> 5, -10=> 5'::istore);
SELECT accumulate('-5=> 5, 3=> 5'::istore);
ROLLBACK;
BEGIN;
-- functions_plain should fill accumulate upto;
-- ./spec/functions_plain_spec.rb:262;
CREATE EXTENSION istore;
SELECT accumulate('2=>17, 4=>3'::istore, 8);
SELECT accumulate('2=>NULL, 4=>3'::istore, 8);
SELECT accumulate('1=>3, 2=>NULL, 4=>3, 6=>2'::istore, 8);
SELECT accumulate(''::istore, 8);
SELECT accumulate('10=>5'::istore, 8);
SELECT accumulate('1=>5'::istore, 0);
SELECT accumulate(NULL::istore, 8);
SELECT accumulate('-20=> 5, -10=> 5'::istore, -8);
SELECT accumulate('-5=> 5, 3=> 5'::istore, 2);
ROLLBACK;
BEGIN;
-- functions_plain should seed an istore from integer;
-- ./spec/functions_plain_spec.rb:279;
CREATE EXTENSION istore;
SELECT istore_seed(2,5,8);
SELECT istore_seed(2,5,NULL);
SELECT istore_seed(2,5,0);
SELECT istore_seed(2,2,8);
SELECT istore_seed(2,2,4e9::bigint);
SELECT istore_seed(2,0,8);
ROLLBACK;
BEGIN;
-- functions_plain should throw an error if negativ seed span;
-- ./spec/functions_plain_spec.rb:293;
CREATE EXTENSION istore;
SELECT istore_seed(-2,0,8);
ROLLBACK;
BEGIN;
-- functions_plain should merge istores by larger keys;
-- ./spec/functions_plain_spec.rb:308;
CREATE EXTENSION istore;
SELECT istore_val_larger('1=>1,2=>1,3=>3', '1=>2,3=>1,4=>1');
ROLLBACK;
BEGIN;
-- functions_plain should merge istores by smaller keys;
-- ./spec/functions_plain_spec.rb:313;
CREATE EXTENSION istore;
SELECT istore_val_smaller('1=>1,2=>1,3=>3', '1=>2,3=>1,4=>1');
ROLLBACK;
BEGIN;
-- functions_plain should return istore with maxed values;
-- ./spec/functions_plain_spec.rb:318;
CREATE EXTENSION istore;
SELECT MAX(s) FROM (VALUES('1=>5, 2=>2, 3=>3'::istore),('1=>1, 2=>5, 3=>3'),('1=>1, 2=>4, 3=>5'))t(s);
ROLLBACK;
BEGIN;
-- functions_plain should return istore with maxed values;
-- ./spec/functions_plain_spec.rb:323;
CREATE EXTENSION istore;
SELECT MIN(s) FROM (VALUES('1=>5, 2=>2, 3=>3'::istore),('1=>1, 2=>5, 3=>3'),('1=>1, 2=>4, 3=>5'))t(s);
ROLLBACK;
