# istore

The idea of istore is  to have an integer based hstore (thus the name) which
supports operators like + and aggregates like SUM.
The textual representation of an istore is the same as for hstore
e.g. `"-5"=>"-25", "0"=>"10", "5"=>"0", "100"=>"30"`
On istore both key and value are represented and stored as integer. The extension
comes with two types `istore` and `bigistore` the former having `int` and the
latter `bigint` as values, keys are `int` for both.

The use case an optimization for istore is an analytical workload.
Think of it as showing distributions of whatever can be represented as integer.

CREATE TABLE event_log AS
SELECT
  d::date as date,
  j as segment,
  i as id, (random()*1000)::int as count,
  (random()*1000)::int as revenues
FROM
  generate_series(1,50) i,
  generate_series(1,1000) j,
  generate_series(current_date - 99, current_date, '1 day') d;

CREATE TABLE event_log2 AS
SELECT
  date,
  segment,
  istore(array_agg(id), array_agg(count)) as counts,
  istore(array_agg(id), array_agg(revenues)) as revenues
FROM event_log
GROUP BY date, segment;

SELECT SUM(count) from event_log where id = 35;
SELECT SUM(counts->35) from event_log2 ;